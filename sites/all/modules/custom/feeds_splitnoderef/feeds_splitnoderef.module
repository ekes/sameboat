<?php

/**
 * @file
 * Mapper that exposes a node's taxonomy vocabularies as mapping targets.
 */

/**
 * Implementation of hook_feeds_node_processor_targets_alter().
 *
 * @see FeedsNodeProcessor::getMappingTargets().
 */
function feeds_splitnoderef_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);

    if ($info['type'] == 'node_reference') {
      $field_label = $instance['label'];
      $targets[$name . ':first'] = array(
        'name' => t('@field_label (by title) - before @', array('@field_label' => $field_label)),
        'callback' => 'feeds_splitnoderef_feeds_set_target',
        'description' => t('The CCK node reference @field_label of the node, matched by node title.', array('@field_label' => $field_label)),
        'real_target' => $name,
      );
      $targets[$name . ':last'] = array(
        'name' => t('@field_label (by title) - after @', array('@field_label' => $field_label)),
        'callback' => 'feeds_splitnoderef_feeds_set_target',
        'description' => t('The CCK node reference @field_label of the node, matched by node title.', array('@field_label' => $field_label)),
        'real_target' => $name,
      );
    }
  }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * @param $node
 *   Reference to the node object we are working on.
 *
 * @param $key
 *   A key as added to the $targets array by
 *   taxonomy_feeds_node_processor_targets_alter().
 *
 * @param $terms
 *   Given terms as array.
 *
 * Add the given terms to the node object so the taxonomy module can add them
 * on node_save().
 */
function feeds_splitnoderef_feeds_set_target($source, $entity, $target, $value) {
  if (empty($value)) {
    return;
  }

  if (!is_array($value)) {
    $value = array($value);
  }

  // Split psudo target
  list($target, $match_key) = explode(':', $target, 2);

  // Load field definition.
  $info = field_info_field($target);

  // Iterate over all values.
  $field = isset($entity->$target) ? $entity->$target : array('und' => array());

  // Allow for multiple mappings to the same target.
  $delta = count($field['und']);

  foreach ($value as $v) {
    if ($info['cardinality'] == $delta) {
      break;
    }

    if (is_object($v) && ($v instanceof FeedsElement)) {
      $v = $v->getValue();
    }

    $nids = array();
    $v = trim($v);

    // Validate title.
    if ((is_string($v) && $v !== '') || is_numeric($v)) {
      $s = explode('@', $v);
      if ($match_key == 'last' && ! empty($s[1])) {
        $v = $s[1];
      }
      else {
        $v = $s[0];
      }
      // Lookup potential exact matches for the value.
      $nids = array_keys(node_reference_potential_references($info, array('string' => $v, 'match' => 'equals')));
    }

    if (! empty($nids)) {
      // Add the reference (ignoring duplicates).
      foreach ($nids as $nid) {
        $field['und'][$delta++]['value'] = array('nid' => $nid);
      }
    }
  }

  $entity->{$target} = $field;
}
